Single inheritance
#include <iostream>
using namespace std;
// Base class
class Shape {
protected:
double width;
double height;
public:
Shape(double w = 0, double h = 0) {
width = w;
height = h;
}
void setWidth(double w) {
width = w;
}
void setHeight(double h) {
height = h;
}
double getWidth() const {
return width;
}
double getHeight() const {
return height;
}
virtual double area() const {
cout << "Parent class area :" << endl;
return 0;
}
};
// Derived class
class Rectangle : public Shape {
public:
Rectangle(double w = 0, double h = 0) : Shape(w, h) {}
double area() const override {
cout << "Rectangle class area :" << endl;
return width * height;
}
};
int main() {
Rectangle rect(5, 4);
cout << "Width: " << rect.getWidth() << endl;
cout << "Height: " << rect.getHeight() << endl;
cout << "Area: " << rect.area() << endl;
return 0;
}
